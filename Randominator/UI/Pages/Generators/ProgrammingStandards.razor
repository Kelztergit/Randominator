@page "/generators/programming-standards"
@using TehGM.Randominator.Generators.ProgrammingStandards
@using TehGM.Randominator.UI.Components.ProgrammingStandards
@inject IProgrammingStandardsGenerator Generator
@inject INamingStyleFormatter NamingFormatter
@inject IClipboard Clipboard
@inject NavigationManager NavigationManager
@attribute [Sitemap(SitemapChangeFrequency.Always)]

<PageMeta Title="@this._metaTitle" Description="@this._metaDescription">
    <GeneratorStructuredData Title="Programming Standards Generator" GeneratorType="GeneratorType.Funny"/>
</PageMeta>
<HeaderTitle>Programming Standards Generator</HeaderTitle>

<p>Programmers love-hate to argue about programming standards. Here's a generator to solve these arguments once for all!</p>

<FormInputWrapper HighlightError="@this._highlightInputError">
    <FormInputPrepend>Language Name</FormInputPrepend>
    <FormTextInput Value="@this.LanguageName" Placeholder="Language Name (max 100 characters)" ValueChanged="this.OnLanguageInput" MaxLength="100" OnEnter="this.OnGenerateClicked" />
</FormInputWrapper>
<FormInputValidationResults ValidationResults="@this._errors" />
<button @onclick="this.OnGenerateClicked" class="btn btn-secondary w-100 mt-1">Generate!</button>

@if (_result != null)
{
    <hr/>
    <h3>Official Unquestionable Standards for <span class="text-special bold">@_result.LanguageName</span> language!</h3>
    <p>Our advanced AI algorithms generated this documentation for you so you can share it with your team members. Thanks to us, your code style will now always be consistent!</p>
    <p>Link to this <i>(obviously 100% legit)</i> documentation page:<br/> 
        <a href="@this._resultURL">@this._resultURL</a> 
        <span class="copy-button @this._copyClass" @onclick="OnCopyClickAsync"></span> 
    </p>

    <div>
        <LoopsSection Standard="@_result" SectionName="Loops"/>
        <FlowControlSection Standard="@_result" SectionName="Flow Control"/>
        <ClassesSection Standard="@_result" SectionName="Classes"/>
        <StructsSection Standard="@_result" SectionName="Structs"/>
        <InterfacesSection Standard="@_result" SectionName="Interfaces"/>
        <MethodsSection Standard="@_result" SectionName="Methods and Functions"/>
        <MethodArgumentsSection Standard="@_result" SectionName="Method and Function Arguments"/>
        <PropertiesSection Standard="@_result" SectionName="Properties"/>
        <PublicFieldsSection Standard="@_result" SectionName="Public Fields"/>
        <PrivateFieldsSection Standard="@_result" SectionName="Private Fields"/>
        <LocalFieldsSection Standard="@_result" SectionName="Local Fields"/>
        <ConstantsSection Standard="@_result" SectionName="Constants"/>
    </div>
}

@code {
    [Parameter, SupplyParameterFromQuery(Name = "lang")]
    public string LanguageName { get; set; }
    private ProgrammingStandard _result = null;
    private string _resultURL = null;
    private string _copyClass = _copyUnclickedClass;
    private string _metaTitle = "Programming Standards Generator";
    private string _metaDescription = "Web-based utility for generating style standards documentation for any programming language you can possibly imagine.";

    private List<ValidationResult> _errors = new List<ValidationResult>();
    private bool _highlightInputError = false;

    private const string _copyUnclickedClass = "bi bi-clipboard";
    private const string _copyClickedClass = "bi bi-clipboard-check";

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrWhiteSpace(this.LanguageName))
            this.GenerateNew();
    }

    private void OnLanguageInput(string value)
    {
        this.LanguageName = value;
        this._highlightInputError = false;
        this._errors.Clear();
    }

    private void OnGenerateClicked()
    {
        if (!this.Validate())
            return;

        this.UpdateLanguageURL();
        this.NavigationManager.NavigateTo(this._resultURL, false);
    }

    public void GenerateNew()
    {
        this.UpdateLanguageURL();
        this._result = this.Generator.Generate(this.LanguageName);
        this._copyClass = _copyUnclickedClass;
        this._metaTitle = $"Programming Standards for {this.LanguageName}";
        this._metaDescription = $"Style standards documentation for '{this.LanguageName}' programming language, generated by Randominator's 'advanced' algorithms.";
    }

    private bool Validate()
    {
        this._errors.Clear();

        if (string.IsNullOrWhiteSpace(this.LanguageName))
        {
            this._errors.Add("Please give us the language name!");
            this._highlightInputError = true;
            this._result = null;
            this._resultURL = null;
            return false;
        }

        return true;
    }

    private void UpdateLanguageURL()
    {
        this.LanguageName = this.LanguageName.Trim();
        this._resultURL = this.NavigationManager.GetUriWithQueryParameter("lang", this.LanguageName);
    }

    private async Task OnCopyClickAsync()
    {
        await this.Clipboard.WriteTextAsync(this._resultURL);
        this._copyClass = _copyClickedClass;
    }
}